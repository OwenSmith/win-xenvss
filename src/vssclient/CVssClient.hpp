/* Copyright (c) Citrix Systems Inc.
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, 
 * with or without modification, are permitted provided 
 * that the following conditions are met:
 * 
 * *   Redistributions of source code must retain the above 
 *     copyright notice, this list of conditions and the 
 *     following disclaimer.
 * *   Redistributions in binary form must reproduce the above 
 *     copyright notice, this list of conditions and the 
 *     following disclaimer in the documentation and/or other 
 *     materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
 * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF 
 * SUCH DAMAGE.
 */

#ifndef _VSS_CLIENT_H
#define _VSS_CLIENT_H

#include <windows.h>
#include <vector>
#include <list>
#include <sstream>

#include "vss.h"
#include "vswriter.h"
#include "vsbackup.h"
#include "vssinterface.hpp"
using namespace std;

#include "VssObjects.hpp"

template<class T> inline void
SAFE_RELEASE (T& x)
{
    if (x != NULL) 
    {
        x->Release();
        x = NULL;
    }
}

template <class C>
std::string
convert_to_hex_string (C value)
{
    std::ostringstream stream;

    stream << hex << showbase << value;
    
    return (stream.str());
};

enum SNAPSHOT_TYPE{
    SNAPSHOT_TYPE_VM, 
    SNAPSHOT_TYPE_VOLUME
};

class CVssClient
{
private:
    enum XEN_VSS_REQ_ERROR{
        XEN_VSS_REQ_ERROR_INIT_FAILED, // "Initialization of the VSS requestor failed."
        XEN_VSS_REQ_ERROR_PROV_NOT_LOADED, // "The Citrix XenServer Vss Provider is not loaded."
        XEN_VSS_REQ_ERROR_NO_VOLUMES_SUPPORTED, // "Could not find any volumes supported by the Citrix XenServer Vss Provider."
        XEN_VSS_REQ_ERROR_START_SNAPSHOT_SET_FAILED, // "An attempt to start a new VSS snapshot failed."
        XEN_VSS_REQ_ERROR_ADDING_VOLUME_TO_SNAPSET_FAILED, // "Some volumes to be snapshot could not be added to the VSS snapshot set."
        XEN_VSS_REQ_ERROR_PREPARING_WRITERS, // "An attempt to prepare VSS writers for the snapshot failed."
        XEN_VSS_REQ_ERROR_CREATING_SNAPSHOT, // "An attempt to create the snapshots failed."
        XEN_VSS_REQ_ERROR_CREATING_SNAPSHOT_XML_STRING // "Could not create the XML string generated by the transportable snapshot."
    };

    static HANDLE           m_threadHandle;
    
    bool                    m_bCoInitializeCalled;
    VSS_ID                  m_snapshotSetId;
    vector <VSS_ID>         m_snapshotIds;
    //HMODULE                 m_hinstLib;
    
    HRESULT                 m_errorCode;
    string                  m_errorMessage;
    XEN_VSS_REQ_ERROR       m_errorState;
    list<CXenVssWriter>     m_writerList;
    SNAPSHOT_TYPE           m_snapshotType;

public:

     CVssClient();
    ~CVssClient();
    void        Initialize(void);
    void        FindXenProvider(void);
    void        ReleaseVssObject(void);
    void        InitVssObject(void);
    void        CreateSnapshotSet(SAVEBACKUPDOC_CALLBACK callback);
    vector<wstring>         m_volumesList;
    IVssBackupComponents   *m_pVssObject;
    
    static BOOL             IsSnapshotSupported(void);
    static void             ProcessSnapshot(void *);
    static void             FinishSnapshot(void);
    static DWORD WINAPI     SnapshotThread(LPVOID commandCode);
    static void             RealSnapshotThread(void);

    int                     GetErrorCode(void)      { return m_errorCode;    };
    string                  GetErrorMessage(void)   { return m_errorMessage; };
    XEN_VSS_REQ_ERROR                  GetErrorState(void)     { return m_errorState;   };
    bool                    FindVolumesToSnapshot(vector <wstring> &volumes);
    void                    SetSnapshotType(SNAPSHOT_TYPE snapType) { m_snapshotType = snapType; }
    SNAPSHOT_TYPE           GetSnapshotType() const { return m_snapshotType; }
   
private:

    void        ThrowIfComError(HRESULT h, const char *msg, const char *func);
    void        ThrowIfNull(const void *p, const char *msg, const char *func);
    void        ThrowError(int errorCode,  const char *msg);
    void        FindXenVolumes (vector <wstring> &volumes);
    void        CollectWriterComponentInformation();
    void        SaveBackupComponentDocument(void);
    bool        AddWriterComponents();        
    void        SelectComponentsForBackup();
    void        AddSelectedComponentsForBackup();
    void        SetWriterComponentsBackupSucceeded(const bool bBackupSucceeded);    
    HRESULT     WaitAndCheckForAsyncOperation(IVssAsync *);
};

#endif // _VSS_CLIENT_H
